[{"C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\index.js":"1","C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\App.js":"2","C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\components\\Navbar.js":"4","C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\components\\Textform.js":"5","C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\components\\About.js":"6","C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\components\\Alert.js":"7"},{"size":535,"mtime":1695811471418,"results":"8","hashOfConfig":"9"},{"size":1913,"mtime":1696761608995,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1695464123955,"results":"11","hashOfConfig":"9"},{"size":2025,"mtime":1696761512090,"results":"12","hashOfConfig":"9"},{"size":2310,"mtime":1696735766697,"results":"13","hashOfConfig":"9"},{"size":3952,"mtime":1696162541102,"results":"14","hashOfConfig":"9"},{"size":415,"mtime":1696696244949,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ynz4vr",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\index.js",[],[],"C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\App.js",[],[],"C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\components\\Navbar.js",[],[],"C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\components\\Textform.js",["40"],[],"import { getByDisplayValue } from '@testing-library/react';\r\nimport React, { useState } from 'react';\r\n\r\n\r\nexport default function Textform(props) {\r\n  const [Text, setText] = useState(\"Enter the text\"); \r\nconst uppercase=()=>{\r\n  // console.log(\"Upper cass was clicked.\")\r\n  let newtext= Text.toUpperCase();\r\n  setText(newtext)\r\n  props.showAlert(\"Convert to UpperCase\",\"Success\")\r\n}\r\nconst onchanged=(event)=>{\r\n  console.log(\"Onchanged\")\r\n  setText(event.target.value)\r\n}\r\nconst lowercase=()=>{\r\n  // console.log(\"Lower was clicked..\")\r\n  let newtxt=Text.toLowerCase();\r\n  setText(newtxt)\r\n  props.showAlert(\"Convert to LowerCase\",\"Success\")\r\n}\r\nconst clear=()=>{\r\n  setText(\"\") \r\n  props.showAlert(\"Cleared Text\",\"Success\")\r\n}\r\nconst copytxt=()=>{\r\n  var text=document.getElementById(\"box\")\r\n  text.select()\r\n  text.setSelectionRange(0,9999)\r\n  navigator.clipboard.writeText(text.value);\r\n  props.showAlert(\"Text copied\",\"Success\")\r\n}\r\nconst extra=()=>{\r\n    let newText=Text.split(/[ ]+/)\r\n    setText(newText.join(\" \"))\r\n    props.showAlert(\"Removed Extra spaces\",\"Success\")\r\n}\r\n  return (\r\n   <div className='container ' style={{color:props.mode==='dark'?'white':'black'}}>\r\n    \r\n    <h1>{props.heading}</h1>\r\n<div className=\"mb-3\">\r\n\r\n  <textarea className=\"form-control\" value={Text} onChange={onchanged} style={{backgroundColor:props.mode==='dark'?'grey':'white' ,\r\n   color:props.mode==='light'?'black':'white'}} id=\"box\" rows=\"8\"></textarea>\r\n</div>\r\n<button className=\"btn btn-primary mx-1\" onClick={uppercase}>Convert to upercase</button>\r\n<button className=\"btn btn-primary mx-1\" onClick={lowercase}>Convert to lowercase</button>\r\n<button className=\"btn btn-danger mx-1\" onClick={clear}>Clear Text</button>\r\n<button className=\"btn btn-primary mx-1\" onClick={copytxt}>Copy Text</button>\r\n<button className=\"btn btn-primary mx-1\" onClick={extra}>Remove ExtraSpaces</button>\r\n<div className=\"container\">\r\n    <h1>Your Text summary</h1>\r\n  \r\n      <p> {Text.split(\" \").length-1} words and {Text.length} charactors</p>\r\n\r\n    \r\n    \r\n\r\n    <p> {0.008* Text.split(\" \").length} MInutes to read charactors</p>\r\n   \r\n</div>\r\n<h2>Preview</h2>\r\n    <div  className=\"mb-3\">\r\n      \r\n\r\n  \r\n    <p>{Text.length>0?Text:\"Enter the text in above box to preview here:\"}</p>\r\n\r\n\r\n  </div>\r\n\r\n</div>\r\n\r\n\r\n   )\r\n}\r\n","C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\components\\About.js",["41"],[],"import React, { useState } from 'react';\r\n\r\nexport default function About() {\r\n  const [mystyle, setMystyle] = useState({\r\n    color:\"white\",\r\n    backgroundColor:\"Black\",\r\n    \r\n})\r\nconst  [btntext, setBtntext] = useState(\"Enable dark mode\")\r\nconst changemode=()=>{\r\n    if (mystyle.color==\"white\"){\r\n        setMystyle(\r\n          {  color:\"black\",\r\n            backgroundColor:\"white\" }\r\n        )\r\n        setBtntext(\"Enable dark mode\")\r\n    }\r\n    else{\r\n        setMystyle(\r\n            {  color:\"white\",\r\n              backgroundColor:\"black\" }\r\n          )\r\n          setBtntext(\"Enable light mode\")\r\n    }\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <div className='container' style={mystyle}>\r\n        <h1 className='my-3'>About us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\">\r\n      <button className=\"accordion-button\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\"style={mystyle} data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" style={mystyle} data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" style={mystyle} data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<button onClick={changemode} className=\"btn btn-primary my-1\">{btntext}</button>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Salman zaidi\\Desktop\\React app\\my-app\\src\\components\\Alert.js",["42"],[],"import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const captalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.chatAt(0).toLowerCase()+lower.slice(1)\r\n    }\r\n  return (\r\n   props.alert&&   <div class={`alert alert-warning alert-dismissible fade show`} role=\"alert\">\r\n       <strong>   {props.alert.type} </strong>      {props.alert.msg}\r\n \r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert",{"ruleId":"43","severity":1,"message":"44","line":1,"column":10,"nodeType":"45","messageId":"46","endLine":1,"endColumn":27},{"ruleId":"47","severity":1,"message":"48","line":11,"column":22,"nodeType":"49","messageId":"50","endLine":11,"endColumn":24},{"ruleId":"43","severity":1,"message":"51","line":4,"column":11,"nodeType":"45","messageId":"46","endLine":4,"endColumn":20},"no-unused-vars","'getByDisplayValue' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'captalize' is assigned a value but never used."]